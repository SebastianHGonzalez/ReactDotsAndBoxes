{"version":3,"sources":["utils/colors.js","utils/board.js","utils/match.js","ducks/match/cells.js","ducks/match/edges.js","ducks/match/board.js","ducks/match/turn.js","ducks/match/index.js","ducks/index.js","store.js","components/Cell.jsx","components/Edge.jsx","components/Grid.jsx","components/Board.jsx","components/TurnIndicator.jsx","components/ScoreBoard.jsx","components/style/index.js","components/MainMenu.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["NO_COLOR","rgba","r","g","b","a","concat","COLORS","bind","undefined","colorForPlayer","playerId","length","colorForPlayerBackground","idForCoords","x","y","BoardElement","type","color","id","adjacentPositions","NO_WINNER","calculateWinner","cells","types","COLOR_CELL","actions","colorCell","payload","selectors","cellsSelector","state","coloredSelector","colored","INITIAL_STATE","makeCells","h","w","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Array","keys","Symbol","iterator","next","done","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","cell","err","return","cellsReducer","arguments","action","boardTypes","INIT_BOARD","Object","objectSpread","height","width","defineProperty","COLOR_EDGE","EDGE_SELECTED","colorEdge","edgeSelected","edgesSelector","edges","isValid","edgesReducer","edge","makeEdges","cellTypes","edgeTypes","cellsActions","edgesActions","initializeBoard","cellsSelectors","edgesSelectors","boardElementsSelector","createSelector","boardReducer","combineReducers","current","total","INITIALIZE_PLAYERS","NEXT","initializePlayers","playerAmount","nextTurn","turnReducer","matchSaga","updateCellsAroundEdgeAt","updateWinner","turnTypes","START_MATCH","SET_WINNER","boardActions","turnActions","setWinner","startMatch","boardSelectors","match","board","winnerSelector","winner","currentPlayerSelector","turn","totalPlayersSelector","matchReducer","saga","takeLatest","_ref","_ref2","regenerator_default","wrap","_context","prev","put","select","t0","sent","t1","take","abrupt","stop","_marked","filterElementsAtPositions","positions","elements","map","_ref3","filter","_ref4","adjCellPos","adjCells","blankCells","blankSurroundedCells","currentPlayer","_context2","adjEdges","duckSelectors","finish","_marked2","_context3","t2","t3","t4","t5","call","_marked3","matchActions","matchSelectors","mark","rootSaga","all","rootReducer","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","reducer","composeWithDevTools","applyMiddleware","apply","run","styled","div","attrs","column","row","style","gridColumnStart","gridRowStart","backgroundColor","_templateObject","Cell","Edge_templateObject","Grid","Grid_templateObject","columns","Math","floor","rows","connect","boardElements","dispatch","players","useEffect","values","react_default","createElement","components_Grid","key","Edge","onClick","TurnIndicator","playerColor","TurnIndicator_templateObject","ScoreBoardTable","ScoreBoard_templateObject","totalPlayers","coloredCells","from","player","border","playerScore","Input","input","style_templateObject","Label","label","_templateObject2","Button","props","assign","FormInputGroup","_templateObject3","NumberCarrousel","lowest","highest","_ref$field","field","name","onChange","isLowest","isHighest","htmlFor","style_Button","target","disabled","readOnly","MainMenu","onGameStart","formik_esm","initialValues","onSubmit","gameConfig","component","Game","_useState","useState","_useState2","slicedToArray","setGameConfig","components_TurnIndicator","components_ScoreBoard","components_Board","onFinish","components_MainMenu","App","components_Game","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0d3e1d66.chunk.js","sourcesContent":["export const NO_COLOR = \"transparent\";\n\nfunction rgba(r,g,b,a) {\n    return `rgba(${r},${g},${b},${a})`\n}\n\nexport const COLORS = [\n    rgba.bind(undefined, 255, 0, 0),\n    rgba.bind(undefined, 0, 0, 255),\n    rgba.bind(undefined, 0, 255, 0),\n    rgba.bind(undefined, 255, 165, 0),\n    rgba.bind(undefined, 128, 0, 128),\n];\n\nexport function colorForPlayer(playerId) {\n    return COLORS[playerId % COLORS.length](0.9)\n}\n\nexport function colorForPlayerBackground(playerId) {\n    return COLORS[playerId % COLORS.length](0.1)\n}","import { colorForPlayer } from \"./colors\";\n\nexport function idForCoords(x, y) {\n  return `${x}-${y}`\n}\n\nexport function BoardElement(type, x, y, color) {\n  return {\n    get id () {return idForCoords(x, y)},\n    type,\n    x,\n    y,\n    color\n  };\n}\n\nexport function adjacentPositions(x, y) {\n  return [\n    {x, y: y + 1},\n    {x, y: y - 1},\n    {x: x + 1, y},\n    {x: x - 1, y},\n  ]\n}\n\nexport function playerScore(player, coloredCells) {\n  return (coloredCells[colorForPlayer(player)] || []).length\n}\n","export const NO_WINNER = -1\n\nexport function calculateWinner(cells) {\n  return NO_WINNER;\n}\n","import { types as boardTypes } from \"ducks/match/board\";\nimport { BoardElement } from \"utils/board\";\nimport { NO_COLOR } from \"utils/colors\";\n\nexport const types = {\n  COLOR_CELL: \"cells/COLOR_CELL\"\n};\n\nexport const actions = {\n  colorCell: (x, y, color) => ({\n    type: types.COLOR_CELL,\n    payload: BoardElement(\"cell\", x, y, color)\n  })\n};\n\nexport const selectors = {\n  cellsSelector: state => state.cells.cells,\n  coloredSelector: state=> state.cells.colored,\n};\n\nconst INITIAL_STATE = { cells: {}, colored: {} };\n\nfunction cellsReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case boardTypes.INIT_BOARD:\n      return {\n        ...INITIAL_STATE,\n        cells: makeCells(action.height, action.width)\n      };\n    case types.COLOR_CELL:\n      return {\n        ...state,\n        colored: {\n          ...state.colored,\n          [action.payload.color]: (\n            state.colored[action.payload.color] || []\n          ).concat(action.payload.id)\n        },\n        cells: {\n          ...state.cells,\n          [action.payload.id]: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nfunction makeCells(h, w) {\n  let cells = {};\n\n  for (let y of Array(h).keys()) {\n    for (let x of Array(w).keys()) {\n      let cell = BoardElement(\"cell\", x * 2 + 1, y * 2 + 1, NO_COLOR);\n\n      cells[cell.id] = cell;\n    }\n  }\n\n  return cells;\n}\n\nexport default cellsReducer;\n","import { types as boardTypes } from \"ducks/match/board\";\nimport { BoardElement } from \"utils/board\";\nimport { NO_COLOR } from \"utils/colors\";\n\nexport const types = {\n  COLOR_EDGE: \"edges/COLOR_EDGE\",\n  EDGE_SELECTED: \"edges/EDGE_SELECTED\"\n};\n\nexport const actions = {\n  colorEdge: (x, y, color) => ({\n    type: types.COLOR_EDGE,\n    payload: BoardElement(\"edge\", x, y, color)\n  }),\n  edgeSelected: (x, y) => ({ type: types.EDGE_SELECTED, x, y })\n};\n\nexport const selectors = {\n  edgesSelector: state => state.edges\n};\n\nconst INITIAL_STATE = {};\n\nfunction edgesReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case boardTypes.INIT_BOARD:\n      return makeEdges(action.height, action.width);\n\n    case types.COLOR_EDGE:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      } \n      \n    default:\n      return state;\n  }\n}\n\nfunction makeEdges(h, w) {\n  let edges = {};\n\n  const width = w * 2 + 1;\n  const height = h * 2 + 1;\n\n  for (let y of Array(height).keys()) {\n    for (let x of Array(width).keys()) {\n      if (isValid(x, y)) {\n        let edge = BoardElement(\"edge\", x, y, NO_COLOR);\n\n        edges[edge.id] = edge;\n      }\n    }\n  }\n  return edges;\n}\n\nfunction isValid(x, y) {\n  return (x + y) % 2;\n}\n\nexport default edgesReducer;\n","import { combineReducers } from \"redux\";\nimport { createSelector } from \"reselect\";\n\nimport cells, {\n  selectors as cellsSelectors,\n  actions as cellsActions,\n  types as cellTypes\n} from \"ducks/match/cells\";\nimport edges, {\n  selectors as edgesSelectors,\n  actions as edgesActions,\n  types as edgeTypes\n} from \"ducks/match/edges\";\n\nexport const types = {\n  ...cellTypes,\n  ...edgeTypes,\n  INIT_BOARD: \"board/INIT_BOARD\"\n};\n\nexport const actions = {\n  ...cellsActions,\n  ...edgesActions,\n  initializeBoard: (height, width) => ({\n    type: types.INIT_BOARD,\n    height,\n    width\n  })\n};\n\nexport const selectors = {\n  ...cellsSelectors,\n  ...edgesSelectors,\n  boardElementsSelector: createSelector(\n    cellsSelectors.cellsSelector,\n    edgesSelectors.edgesSelector,\n    cellsSelectors.coloredSelector,\n    (cells, edges, colored) => ({cells, edges, colored})\n  )\n};\n\nconst boardReducer = combineReducers({ cells, edges });\n\nexport default boardReducer;\n","const INITIAL_STATE = { current: 0, total: 0 };\n\nexport const types = {\n  INITIALIZE_PLAYERS: \"turn/INITIALIZE_PLAYERS\",\n  NEXT: \"turn/NEXT\"\n};\n\nexport const actions = {\n  initializePlayers: playerAmount => ({\n    type: types.INITIALIZE_PLAYERS,\n    payload: playerAmount\n  }),\n  nextTurn: () => ({ type: types.NEXT })\n};\n\nfunction turnReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.INITIALIZE_PLAYERS:\n      return { ...INITIAL_STATE, total: action.payload };\n    case types.NEXT:\n      return { ...state, current: (state.current + 1) % state.total };\n    default:\n      return state;\n  }\n}\n\nexport default turnReducer;\n","import { combineReducers } from \"redux\";\nimport { takeLatest, put, take, select } from \"redux-saga/effects\";\n\nimport { selectors as duckSelectors } from \"ducks\";\nimport { NO_COLOR, colorForPlayer } from \"utils/colors\";\nimport { adjacentPositions, idForCoords } from \"utils/board\";\nimport { calculateWinner, NO_WINNER } from \"utils/match\";\n\nimport board, {\n  selectors as boardSelectors,\n  actions as boardActions,\n  types as boardTypes\n} from \"ducks/match/board\";\nimport turn, {\n  actions as turnActions,\n  types as turnTypes\n} from \"ducks/match/turn\";\n\nexport const types = {\n  ...boardTypes,\n  ...turnTypes,\n  START_MATCH: \"match/START_MATCH\",\n  SET_WINNER: \"match/SET_WINNER\"\n};\n\nexport const actions = {\n  ...boardActions,\n  ...turnActions,\n  setWinner: playerId => ({\n    type: types.SET_WINNER,\n    payload: playerId\n  }),\n  startMatch: (playerAmount, height, width) => ({\n    type: types.START_MATCH,\n    playerAmount,\n    height,\n    width\n  })\n};\n\nexport const selectors = {\n  cellsSelector: state => boardSelectors.cellsSelector(state.match.board),\n  edgesSelector: state => boardSelectors.edgesSelector(state.match.board),\n  boardElementsSelector: state =>\n    boardSelectors.boardElementsSelector(state.board),\n  winnerSelector: state => state.match.winner,\n  currentPlayerSelector: state => state.turn.current,\n  totalPlayersSelector: state => state.turn.total \n};\n\nfunction winnerReducer(state = NO_WINNER, action) {\n  switch (action.type) {\n    case types.INIT_BOARD:\n      return NO_WINNER;\n    case types.SET_WINNER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nconst matchReducer = combineReducers({ board, turn, winner: winnerReducer });\n\nexport default matchReducer;\n\nexport const saga = takeLatest(types.START_MATCH, matchSaga);\n\nfunction* matchSaga({ playerAmount, width, height }) {\n  yield put(actions.initializeBoard(height, width));\n  yield put(actions.initializePlayers(playerAmount));\n\n  while ((yield select(selectors.winnerSelector)) === NO_WINNER) {\n    const { x, y } = yield take(types.EDGE_SELECTED);\n    yield put(actions.colorEdge(x, y, \"black\"));\n\n    yield updateCellsAroundEdgeAt({ x, y });\n\n    yield updateWinner();\n  }\n\n  return;\n}\n\nfunction filterElementsAtPositions(positions, elements) {\n  return positions.map(({x,y})=> idForCoords(x, y)).map(id => elements[id]).filter(x => x)\n}\n\nfunction* updateCellsAroundEdgeAt({ x, y }) {\n  const cells = yield select(selectors.cellsSelector);\n  const adjCellPos = adjacentPositions(x, y);\n\n  const adjCells = filterElementsAtPositions(adjCellPos, cells);\n\n  const blankCells = adjCells.filter(cell => cell.color === NO_COLOR);\n\n  const edges = yield select(selectors.edgesSelector);\n\n  const blankSurroundedCells = blankCells.filter(cell => {\n    const adjEdgePos = adjacentPositions(cell.x, cell.y);\n    const adjEdges = filterElementsAtPositions(adjEdgePos, edges);\n    const filledAdjEdges = adjEdges.filter(edge => edge.color !== NO_COLOR);\n    return filledAdjEdges.length === adjEdges.length;\n  });\n\n  const currentPlayer = yield select(duckSelectors.currentPlayerSelector)\n  for (let cell of blankSurroundedCells) {\n    yield put(actions.colorCell(cell.x, cell.y, colorForPlayer(currentPlayer)));\n  }\n\n  if(!blankSurroundedCells.length) {\n    yield put(actions.nextTurn())\n  }\n\n  return;\n}\n\nfunction* updateWinner() {\n  yield put(\n    actions.setWinner(calculateWinner(yield select(selectors.cellsSelector)))\n  );\n}\n","import { combineReducers } from \"redux\";\nimport { all } from \"redux-saga/effects\";\n\nimport match, {\n  selectors as matchSelectors,\n  actions as matchActions,\n  saga as matchSaga\n} from \"ducks/match\";\n\nexport const actions = {\n  ...matchActions\n};\n\nexport const selectors = {\n  currentPlayerSelector: state =>\n    matchSelectors.currentPlayerSelector(state.match),\n  totalPlayersSelector: state =>\n    matchSelectors.totalPlayersSelector(state.match),\n  boardElementsSelector: state =>\n    matchSelectors.boardElementsSelector(state.match)\n};\n\nexport const saga = function* rootSaga() {\n  yield all([matchSaga]);\n};\n\nconst rootReducer = combineReducers({ match });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer, { saga } from \"ducks\";\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middleware = [\n  sagaMiddleware,\n];\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(...middleware)\n    // other store enhancers if any\n  )\n);\n\nsagaMiddleware.run(saga);\n\nexport default store;\n","import styled from \"styled-components\";\n\nexport default styled.div.attrs(({ column, row, color, type }) => ({\n  style: {\n    gridColumnStart: column + 1,\n    gridRowStart: row + 1,\n    backgroundColor: color,\n  }\n}))`\n  width: 100%;\n  height: 100%;\n  border: 0.001rem black solid;\n  transition: background-color 200ms cubic-bezier(0, 0.9, 0.7, 1);\n`;\n","import styled from \"styled-components\";\n\nimport Cell from \"components/Cell\";\n\nexport default styled(Cell)`\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nconst Grid = styled.div`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  gap: 0.2rem;\n  grid-template-columns:\n    repeat(${({ columns }) => Math.floor(columns / 2)}, 1fr 2fr)\n    1fr;\n  grid-template-rows:\n    repeat(${({ rows }) => Math.floor(rows / 2)}, 1fr 2fr)\n    1fr;\n  place-items: center center;\n`;\n\nexport default Grid;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Cell from \"components/Cell\";\nimport Edge from \"components/Edge\";\nimport Grid from \"components/Grid\";\nimport { actions, selectors } from \"ducks\";\nimport { NO_COLOR } from \"utils/colors\";\n\nconst Board = ({\n  players,\n  height,\n  width,\n  startMatch,\n  boardElements,\n  edgeSelected\n}) => {\n  useEffect(() => {\n    startMatch(players, height, width);\n  }, [startMatch, players, width, height]);\n\n  const cells = Object.values(boardElements.cells);\n  const edges = Object.values(boardElements.edges);\n\n  return (\n    <Grid rows={height * 2 + 1} columns={width * 2 + 1}>\n      {cells.map(({ id, type, x, y, color }) => (\n        <Cell key={id} color={color} type={type} column={x} row={y} />\n      ))}\n      {edges.map(({ id, type, x, y, color }) => (\n        <Edge\n          key={id}\n          color={color}\n          type={type}\n          column={x}\n          row={y}\n          onClick={color === NO_COLOR ? () => edgeSelected(x, y) : undefined}\n        />\n      ))}\n    </Grid>\n  );\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startMatch: (...args) => dispatch(actions.startMatch(...args)),\n    edgeSelected: (...args) => dispatch(actions.edgeSelected(...args))\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    boardElements: selectors.boardElementsSelector(state)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Board);\n","import { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { selectors } from \"ducks\";\nimport { colorForPlayerBackground } from \"utils/colors\";\n\nconst TurnIndicator = styled.div.attrs(({ playerColor }) => ({\n  style: {\n    backgroundColor: playerColor\n  }\n}))`\n  width: 100%;\n  height: 100%;\n  transition: background-color 300ms cubic-bezier(0, 0.5, 0.5, 1);\n  display: grid;\n  grid-template-rows: 2rem;\n  gap: 0.2rem;\n  `;\n\nconst mapStateToProps = state => ({\n  playerColor: colorForPlayerBackground(selectors.currentPlayerSelector(state))\n});\n\nexport default connect(mapStateToProps)(TurnIndicator);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { selectors } from \"ducks\";\n\nimport { colorForPlayerBackground } from \"utils/colors\";\nimport { playerScore } from \"utils/board\";\n\nconst ScoreBoardTable = styled.div`\n  grid-auto-flow: column;\n  display: grid;\n`;\n\nconst ScoreBoard = ({ currentPlayer, totalPlayers, coloredCells }) => (\n  <ScoreBoardTable>\n    {Array.from(Array(totalPlayers).keys()).map(player => (\n      <div\n        key={player}\n        style={{\n          border: player === currentPlayer ? `black 0.001rem solid` : \"\",\n          backgroundColor: colorForPlayerBackground(player)\n        }}\n      >\n        {playerScore(player, coloredCells)}\n      </div>\n    ))}\n  </ScoreBoardTable>\n);\n\nconst mapStateToProps = state => ({\n  currentPlayer: selectors.currentPlayerSelector(state),\n  totalPlayers: selectors.totalPlayersSelector(state),\n  coloredCells: selectors.boardElementsSelector(state).colored\n});\n\nexport default connect(mapStateToProps)(ScoreBoard);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Input = styled.input`\n  border: 0;\n  border-bottom: 0.1rem var(--brand-accent) solid;\n  background-color: rgba(0, 0, 0, 0.02);\n  margin: 0.1rem;\n  cursor: unset;\n\n  &:hover:not([readonly]) {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  &[type=\"submit\"],\n  &[type=\"button\"] {\n    cursor: pointer;\n  }\n\n  &[type=\"submit\"] {\n    width: 100%;\n    margin: 1rem 0;\n    line-height: 400%;\n    font-size: xx-large !important;\n    color: var(--brand-primary-text);\n    background-color: var(--brand-primary);\n    border: var(--brand-primary-text) 10px 10px;\n\n    &:hover {\n        background-color: var(--brand-primary-light);    \n    }\n  }\n`;\n\nexport const Label = styled.label`\n  padding: 1rem;\n`;\n\nexport const Button = props => <Input type=\"button\" {...props} />;\n\nexport const FormInputGroup = styled.div`\n  display: flex;\n  flex: 1 1 auto;\n  flex-direction: column;\n\n  > * {\n    flex: 1 1 auto;\n    flex-direction: row;\n  }\n`;\n","import React from \"react\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport { Label, Button, Input, FormInputGroup } from \"components/style\";\n\nimport { COLORS } from \"utils/colors\";\n\nconst NumberCarrousel = ({\n  lowest,\n  highest,\n  label,\n  field: { name, value, onChange }\n}) => {\n  const isLowest = value === lowest;\n  const isHighest = value === highest;\n\n  const decrement = () => onChange({ target: { name, value: value - 1 } });\n  const increment = () => onChange({ target: { name, value: value + 1 } });\n\n  return (\n    <FormInputGroup>\n      {label && <Label htmlFor={name}>{label}</Label>}\n      <FormInputGroup>\n        <Button onClick={decrement} value=\"-\" disabled={isLowest} />\n        <Input type=\"number\" readOnly name={name} value={value} />\n        <Button onClick={increment} value=\"+\" disabled={isHighest} />\n      </FormInputGroup>\n    </FormInputGroup>\n  );\n};\n\nconst MainMenu = ({ onGameStart }) => (\n  <Formik\n    initialValues={{ players: 2, height: 8, width: 8 }}\n    onSubmit={gameConfig => onGameStart(gameConfig)}\n  >\n    <Form>\n      <Field\n        name=\"players\"\n        label=\"Players\"\n        component={NumberCarrousel}\n        lowest={1}\n        highest={COLORS.length}\n      />\n      <Field\n        name=\"height\"\n        label=\"Board Height\"\n        component={NumberCarrousel}\n        lowest={2}\n        highest={12}\n      />\n      <Field\n        name=\"width\"\n        label=\"Board Width\"\n        component={NumberCarrousel}\n        lowest={2}\n        highest={12}\n      />\n      <Button type=\"submit\" value=\"Play\" />\n    </Form>\n  </Formik>\n);\n\nexport default MainMenu;\n","import React, { useState } from \"react\";\n\nimport Board from \"components/Board\";\nimport TurnIndicator from \"components/TurnIndicator\";\nimport ScoreBoard from \"components/ScoreBoard\";\nimport MainMenu from \"components/MainMenu\";\n\nfunction Game() {\n  const [gameConfig, setGameConfig] = useState(null);\n\n  return gameConfig ? (\n    <TurnIndicator>\n      <ScoreBoard />\n      <Board {...gameConfig} onFinish={() => setGameConfig(null)} />\n    </TurnIndicator>\n  ) : (\n    <MainMenu onGameStart={setGameConfig} />\n  );\n}\n\nexport default Game;\n","import React from \"react\";\n\nimport Game from \"components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from 'store'\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nimport \"index.css\";\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}