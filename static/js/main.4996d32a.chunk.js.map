{"version":3,"sources":["utils/colors.js","utils/board.js","utils/match.js","ducks/match/cells.js","ducks/match/edges.js","ducks/match/board.js","ducks/match/turn.js","ducks/match/index.js","ducks/index.js","store.js","components/Cell.jsx","components/Grid.jsx","components/Board.jsx","components/TurnIndicator.jsx","components/ScoreBoard.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["NO_COLOR","rgba","r","g","b","a","concat","COLORS","bind","undefined","colorForPlayer","playerId","length","colorForPlayerBackground","BoardElement","type","x","y","color","adjacentPositions","NO_WINNER","calculateWinner","cells","types","COLOR_CELL","actions","colorCell","selectors","cellsSelector","state","INITIAL_STATE","cellsReducer","arguments","action","boardTypes","INIT_BOARD","h","w","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Array","keys","Symbol","iterator","next","done","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","makeCells","height","width","filter","cell","COLOR_EDGE","EDGE_SELECTED","colorEdge","edgeSelected","edgesSelector","edges","isValid","edgesReducer","push","makeEdges","edge","Object","objectSpread","cellTypes","edgeTypes","cellsActions","edgesActions","initializeBoard","cellsSelectors","edgesSelectors","boardElementsSelector","createSelector","boardReducer","combineReducers","current","total","INITIALIZE_PLAYERS","NEXT","initializePlayers","playerAmount","payload","nextTurn","turnReducer","matchSaga","updateCellsAroundEdgeAt","updateWinner","turnTypes","START_MATCH","SET_WINNER","boardActions","turnActions","setWinner","startMatch","boardSelectors","match","board","winnerSelector","winner","currentPlayerSelector","turn","totalPlayersSelector","matchReducer","saga","takeLatest","_ref","_ref2","regenerator_default","wrap","_context","prev","put","select","t0","sent","t1","take","abrupt","stop","_marked","filterElementsAtPositions","positions","elements","some","pos","_ref3","adjCellPos","adjCells","blankCells","blankSurroundedCells","currentPlayer","_context2","adjEdges","duckSelectors","finish","_marked2","_context3","t2","t3","t4","t5","call","_marked3","matchActions","matchSelectors","mark","rootSaga","all","rootReducer","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","reducer","composeWithDevTools","applyMiddleware","apply","run","styled","div","attrs","style","gridColumnStart","column","gridRowStart","row","backgroundColor","borderColor","_templateObject","Grid","Grid_templateObject","columns","Math","floor","rows","connect","dispatch","players","useEffect","react_default","createElement","components_Grid","map","Cell","key","onClick","TurnIndicator","playerColor","TurnIndicator_templateObject","ScoreBoardTable","ScoreBoard_templateObject","totalPlayers","from","player","border","playerScore","Game","props","margin","components_TurnIndicator","components_ScoreBoard","components_Board","App","components_Game","Boolean","window","location","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4996d32a.chunk.js","sourcesContent":["export const NO_COLOR = \"transparent\";\n\nfunction rgba(r,g,b,a) {\n    return `rgba(${r},${g},${b},${a})`\n}\n\nexport const COLORS = [\n    rgba.bind(undefined, 255, 0, 0),\n    rgba.bind(undefined, 0, 0, 255),\n    rgba.bind(undefined, 0, 255, 0),\n    rgba.bind(undefined, 255, 165, 0),\n    rgba.bind(undefined, 128, 0, 128),\n];\n\nexport function colorForPlayer(playerId) {\n    return COLORS[playerId % COLORS.length](0.9)\n}\n\nexport function colorForPlayerBackground(playerId) {\n    return COLORS[playerId % COLORS.length](0.1)\n}","import { colorForPlayer } from \"./colors\";\n\nexport function BoardElement(type, x, y, color) {\n  return {\n    type,\n    x,\n    y,\n    color\n  };\n}\n\nexport function adjacentPositions(x, y) {\n  return [\n    {x, y: y + 1},\n    {x, y: y - 1},\n    {x: x + 1, y},\n    {x: x - 1, y},\n  ]\n}\n\nexport function playerScore(player, cells) {\n  return cells.filter(cell => cell.color === colorForPlayer(player)).length\n}\n","export const NO_WINNER = -1\n\nexport function calculateWinner(cells) {\n  return NO_WINNER;\n}\n","import { types as boardTypes } from \"ducks/match/board\";\nimport { BoardElement } from \"utils/board\";\nimport { NO_COLOR } from \"utils/colors\";\n\nexport const types = {\n  COLOR_CELL: \"cells/COLOR_CELL\"\n};\n\nexport const actions = {\n  colorCell: (x, y, color) => ({ type: types.COLOR_CELL, x, y, color })\n};\n\nexport const selectors = {\n  cellsSelector: state => state.cells\n};\n\nconst INITIAL_STATE = [];\n\nfunction cellsReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case boardTypes.INIT_BOARD:\n      return makeCells(action.height, action.width);\n    case types.COLOR_CELL:\n      return state\n        .filter(cell => cell.x !== action.x || cell.y !== action.y)\n        .concat(\n          BoardElement(\"cell\", action.x, action.y, action.color)\n        );\n    default:\n      return state;\n  }\n}\n\nfunction makeCells(h, w) {\n  let cells = [];\n\n  for (let y of Array(h).keys()) {\n    for (let x of Array(w).keys()) {\n      cells = cells.concat(BoardElement(\"cell\", x * 2 + 1, y * 2 + 1, NO_COLOR));\n    }\n  }\n\n  return cells;\n}\n\nexport default cellsReducer;\n","import { types as boardTypes } from \"ducks/match/board\";\nimport { BoardElement } from \"utils/board\";\nimport { NO_COLOR } from \"utils/colors\";\n\nexport const types = {\n  COLOR_EDGE: \"edges/COLOR_EDGE\",\n  EDGE_SELECTED: \"edges/EDGE_SELECTED\"\n};\n\nexport const actions = {\n  colorEdge: (x, y, color) => ({ type: types.COLOR_EDGE, x, y, color }),\n  edgeSelected: (x, y) => ({ type: types.EDGE_SELECTED, x, y })\n};\n\nexport const selectors = {\n  edgesSelector: state => state.edges\n};\n\nconst INITIAL_STATE = [];\n\nfunction edgesReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case boardTypes.INIT_BOARD:\n      return makeEdges(action.height, action.width);\n\n    case types.COLOR_EDGE:\n      return state\n        .filter(edge => edge.x !== action.x || edge.y !== action.y)\n        .concat(BoardElement(\"edge\", action.x, action.y, action.color));\n\n    default:\n      return state;\n  }\n}\n\nfunction makeEdges(h, w) {\n  let edges = [];\n\n  const width = w * 2 + 1;\n  const height = h * 2 + 1;\n\n  for (let y of Array(height).keys()) {\n    for (let x of Array(width).keys()) {\n      if (isValid(x, y)) {\n        edges.push(BoardElement(\"edge\", x, y, NO_COLOR));\n      }\n    }\n  }\n  return edges;\n}\n\nfunction isValid(x, y) {\n  return (x + y) % 2;\n}\n\nexport default edgesReducer;\n","import { combineReducers } from \"redux\";\nimport { createSelector } from \"reselect\";\n\nimport cells, {\n  selectors as cellsSelectors,\n  actions as cellsActions,\n  types as cellTypes\n} from \"ducks/match/cells\";\nimport edges, {\n  selectors as edgesSelectors,\n  actions as edgesActions,\n  types as edgeTypes\n} from \"ducks/match/edges\";\n\nexport const types = {\n  ...cellTypes,\n  ...edgeTypes,\n  INIT_BOARD: \"board/INIT_BOARD\"\n};\n\nexport const actions = {\n  ...cellsActions,\n  ...edgesActions,\n  initializeBoard: (height, width) => ({\n    type: types.INIT_BOARD,\n    height,\n    width\n  })\n};\n\nexport const selectors = {\n  ...cellsSelectors,\n  ...edgesSelectors,\n  boardElementsSelector: createSelector(\n    cellsSelectors.cellsSelector,\n    edgesSelectors.edgesSelector,\n    (cells, edges) => cells.concat(edges)\n  )\n};\n\nconst boardReducer = combineReducers({ cells, edges });\n\nexport default boardReducer;\n","const INITIAL_STATE = { current: 0, total: 0 };\n\nexport const types = {\n  INITIALIZE_PLAYERS: \"turn/INITIALIZE_PLAYERS\",\n  NEXT: \"turn/NEXT\"\n};\n\nexport const actions = {\n  initializePlayers: playerAmount => ({\n    type: types.INITIALIZE_PLAYERS,\n    payload: playerAmount\n  }),\n  nextTurn: () => ({ type: types.NEXT })\n};\n\nfunction turnReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.INITIALIZE_PLAYERS:\n      return { ...INITIAL_STATE, total: action.payload };\n    case types.NEXT:\n      return { ...state, current: (state.current + 1) % state.total };\n    default:\n      return state;\n  }\n}\n\nexport default turnReducer;\n","import { combineReducers } from \"redux\";\nimport { takeLatest, put, take, select } from \"redux-saga/effects\";\n\nimport { selectors as duckSelectors } from \"ducks\";\nimport { NO_COLOR, colorForPlayer } from \"utils/colors\";\nimport { adjacentPositions } from \"utils/board\";\nimport { calculateWinner, NO_WINNER } from \"utils/match\";\n\nimport board, {\n  selectors as boardSelectors,\n  actions as boardActions,\n  types as boardTypes\n} from \"ducks/match/board\";\nimport turn, {\n  actions as turnActions,\n  types as turnTypes\n} from \"ducks/match/turn\";\n\nexport const types = {\n  ...boardTypes,\n  ...turnTypes,\n  START_MATCH: \"match/START_MATCH\",\n  SET_WINNER: \"match/SET_WINNER\"\n};\n\nexport const actions = {\n  ...boardActions,\n  ...turnActions,\n  setWinner: playerId => ({\n    type: types.SET_WINNER,\n    payload: playerId\n  }),\n  startMatch: (playerAmount, height, width) => ({\n    type: types.START_MATCH,\n    playerAmount,\n    height,\n    width\n  })\n};\n\nexport const selectors = {\n  cellsSelector: state => boardSelectors.cellsSelector(state.match.board),\n  edgesSelector: state => boardSelectors.edgesSelector(state.match.board),\n  boardElementsSelector: state =>\n    boardSelectors.boardElementsSelector(state.board),\n  winnerSelector: state => state.match.winner,\n  currentPlayerSelector: state => state.turn.current,\n  totalPlayersSelector: state => state.turn.total \n};\n\nfunction winnerReducer(state = NO_WINNER, action) {\n  switch (action.type) {\n    case types.INIT_BOARD:\n      return NO_WINNER;\n    case types.SET_WINNER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nconst matchReducer = combineReducers({ board, turn, winner: winnerReducer });\n\nexport default matchReducer;\n\nexport const saga = takeLatest(types.START_MATCH, matchSaga);\n\nfunction* matchSaga({ playerAmount, width, height }) {\n  yield put(actions.initializeBoard(height, width));\n  yield put(actions.initializePlayers(playerAmount));\n\n  while ((yield select(selectors.winnerSelector)) === NO_WINNER) {\n    const { x, y } = yield take(types.EDGE_SELECTED);\n    yield put(actions.colorEdge(x, y, \"black\"));\n\n    yield updateCellsAroundEdgeAt({ x, y });\n\n    yield updateWinner();\n  }\n\n  return;\n}\n\nfunction filterElementsAtPositions(positions, elements) {\n  return elements.filter(cell =>\n    positions.some(pos => cell.x === pos.x && cell.y === pos.y)\n  );\n}\n\nfunction* updateCellsAroundEdgeAt({ x, y }) {\n  const cells = yield select(selectors.cellsSelector);\n  const adjCellPos = adjacentPositions(x, y);\n\n  const adjCells = filterElementsAtPositions(adjCellPos, cells);\n\n  const blankCells = adjCells.filter(cell => cell.color === NO_COLOR);\n\n  const edges = yield select(selectors.edgesSelector);\n\n  const blankSurroundedCells = blankCells.filter(cell => {\n    const adjEdgePos = adjacentPositions(cell.x, cell.y);\n    const adjEdges = filterElementsAtPositions(adjEdgePos, edges);\n    const filledAdjEdges = adjEdges.filter(edge => edge.color !== NO_COLOR);\n    return filledAdjEdges.length === adjEdges.length;\n  });\n\n  const currentPlayer = yield select(duckSelectors.currentPlayerSelector)\n  for (let cell of blankSurroundedCells) {\n    yield put(actions.colorCell(cell.x, cell.y, colorForPlayer(currentPlayer)));\n  }\n\n  if(!blankSurroundedCells.length) {\n    yield put(actions.nextTurn())\n  }\n\n  return;\n}\n\nfunction* updateWinner() {\n  yield put(\n    actions.setWinner(calculateWinner(yield select(selectors.cellsSelector)))\n  );\n}\n","import { combineReducers } from \"redux\";\nimport { all } from \"redux-saga/effects\";\n\nimport match, {\n  selectors as matchSelectors,\n  actions as matchActions,\n  saga as matchSaga\n} from \"ducks/match\";\n\nexport const actions = {\n  ...matchActions\n};\n\nexport const selectors = {\n  currentPlayerSelector: state =>\n    matchSelectors.currentPlayerSelector(state.match),\n  totalPlayersSelector: state =>\n    matchSelectors.totalPlayersSelector(state.match),\n  boardElementsSelector: state =>\n    matchSelectors.boardElementsSelector(state.match)\n};\n\nexport const saga = function* rootSaga() {\n  yield all([matchSaga]);\n};\n\nconst rootReducer = combineReducers({ match });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer, { saga } from \"ducks\";\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middleware = [\n  sagaMiddleware,\n];\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(...middleware)\n    // other store enhancers if any\n  )\n);\n\nsagaMiddleware.run(saga);\n\nexport default store;\n","import styled from \"styled-components\";\n\nexport default styled.div.attrs(({ column, row, color, type }) => ({\n  style: {\n    gridColumnStart: column + 1,\n    gridRowStart: row + 1,\n    backgroundColor: color,\n    borderColor: type === \"cell\" ? \"red\" : \"gray\"\n  }\n}))`\n  width: 100%;\n  height: 100%;\n  border: 0.1rem dotted;\n`;\n","import styled from \"styled-components\";\n\nconst Grid = styled.div`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns:\n    repeat(${({ columns }) => Math.floor(columns / 2)}, 1fr 2fr)\n    1fr;\n  grid-template-rows:\n    repeat(${({ rows }) => Math.floor(rows / 2)}, 1fr 2fr)\n    1fr;\n  place-items: center center;\n`;\n\nexport default Grid;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Cell from \"components/Cell\";\nimport Grid from \"components/Grid\";\nimport { actions, selectors } from \"ducks\";\nimport { NO_COLOR } from \"utils/colors\";\n\nconst Board = ({ players, height, width, startMatch, cells, edgeSelected }) => {\n  useEffect(() => {\n    startMatch(players, height, width);\n  }, [startMatch, players, width, height]);\n\n  return (\n    <Grid rows={height * 2 + 1} columns={width * 2 + 1}>\n      {cells.map(({ type, x, y, color }) => (\n        <Cell\n          key={`${x}-${y}`}\n          color={color}\n          onClick={\n            type === \"edge\" && color === NO_COLOR\n              ? () => edgeSelected(x, y)\n              : undefined\n          }\n          type={type}\n          column={x}\n          row={y}\n        />\n      ))}\n    </Grid>\n  );\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startMatch: (...args) => dispatch(actions.startMatch(...args)),\n    edgeSelected: (...args) => dispatch(actions.edgeSelected(...args))\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    cells: selectors.boardElementsSelector(state)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Board);\n","import { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { selectors } from \"ducks\";\nimport { colorForPlayerBackground } from \"utils/colors\";\n\nconst TurnIndicator = styled.div.attrs(({ playerColor }) => ({\n  style: {\n    backgroundColor: playerColor\n  }\n}))`\n  width: 100%;\n  height: 100%;\n  transition: background-color 300ms cubic-bezier(0, 0.5, 0.5, 1);\n`;\n\nconst mapStateToProps = state => ({\n  playerColor: colorForPlayerBackground(selectors.currentPlayerSelector(state))\n});\n\nexport default connect(mapStateToProps)(TurnIndicator);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { selectors } from \"ducks\";\n\nimport { colorForPlayerBackground } from \"utils/colors\";\nimport { playerScore } from \"utils/board\";\n\nconst ScoreBoardTable = styled.div`\n  grid-auto-flow: column;\n  display: grid;\n`;\n\nconst ScoreBoard = ({ currentPlayer, totalPlayers, cells }) => (\n  <ScoreBoardTable>\n    {Array.from(Array(totalPlayers).keys()).map(player => (\n      <div\n        key={player}\n        style={{\n          border: player === currentPlayer ? `black 0.1rem dotted` : \"\",\n          backgroundColor: colorForPlayerBackground(player)\n        }}\n      >\n        {playerScore(player, cells)}\n      </div>\n    ))}\n  </ScoreBoardTable>\n);\n\nconst mapStateToProps = state => ({\n  currentPlayer: selectors.currentPlayerSelector(state),\n  totalPlayers: selectors.totalPlayersSelector(state),\n  cells: selectors.boardElementsSelector(state)\n});\n\nexport default connect(mapStateToProps)(ScoreBoard);\n","import React from \"react\";\nimport Board from \"components/Board\";\nimport TurnIndicator from \"components/TurnIndicator\";\nimport ScoreBoard from \"components/ScoreBoard\";\n\nfunction Game(props) {\n  return (\n    <div\n      style={{ margin: \"auto\", width: \"80vw\", height: \"80vh\" }}\n    >\n      <TurnIndicator>\n        <ScoreBoard />\n        <Board players={4} height={10} width={10} />\n      </TurnIndicator>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\n\nimport Game from \"components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from 'store'\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}